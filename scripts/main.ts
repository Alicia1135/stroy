import { createHash } from "crypto";
import { MintAndRegisterIpAssetWithPilTermsResponse,IpMetadata, PIL_TYPE } from "@story-protocol/core-sdk";
import { StoryClient, StoryConfig } from "@story-protocol/core-sdk";
import { http } from "viem";
import { privateKeyToAccount, Address, Account } from "viem/accounts";
import OpenAI from 'openai'
import dotenv from 'dotenv'
import { account, client, createNFTCollectionAddress } from "./utils/utils";
import { uploadJSONToIPFS } from "./utils/utils/uploadToIpfs";
dotenv.config()

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
})

async function main() {
  const image = await openai.images.generate({ 
    model: 'dall-e-2', 
    prompt: 'A spiral Tree' 
  });
  
  console.log(image.data[0].url) // the url to the newly created image

  const ipMetadata: IpMetadata = client.ipAsset.generateIpMetadata({
    title: 'Dall-E 2 Image',
    description: 'An image generated by Dall-E 2',
    ipType: 'image',
    attributes: [
      {
        key: 'Model',
        value: 'dall-e-2',
      },
      {
        key: 'Prompt',
        value: 'A spiral Tree',
      },
    ],
    creators: [
      {
        name: 'Alimi Emmanuel',
        contributionPercent: 100,
        address: account.address,
      },
    ],
  })

  const nftMetadata = {
    name: 'NFT representing ownership of our image',
    description: 'This NFT represents ownership of the image generated by Dall-E 2',
    image: image.data[0].url,
    attributes: [
      {
        key: 'Model',
        value: 'dall-e-2',
      },
      {
        key: 'Prompt',
        value: 'A spiral Tree',
      },
    ],
  }

  const ipIpfsHash = await uploadJSONToIPFS(ipMetadata);
  const ipHash = createHash("sha256")
    .update(JSON.stringify(ipMetadata))
    .digest("hex");
  const nftIpfsHash = await uploadJSONToIPFS(nftMetadata);
  const nftHash = createHash("sha256")
    .update(JSON.stringify(nftMetadata))
    .digest("hex");

    const response: MintAndRegisterIpAssetWithPilTermsResponse =
    await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({
      spgNftContract: process.env.SPG_NFT_CONTRACT_ADDRESS as Address,
      terms: [], // IP already has non-commercial social remixing terms. You can add more here.
      ipMetadata: {
        ipMetadataURI: `https://ipfs.io/ipfs/${ipIpfsHash}`,
        ipMetadataHash: `0x${ipHash}`,
        nftMetadataURI: `https://ipfs.io/ipfs/${nftIpfsHash}`,
        nftMetadataHash: `0x${nftHash}`,
      },
      txOptions: { waitForTransaction: true },
    });
  
  console.log(
    `Root IPA created at transaction hash ${response.txHash}, IPA ID: ${response.ipId}`
  );
  console.log(
    `View on the explorer: https://explorer.story.foundation/ipa/${response.ipId}`
  );  
}

main();
